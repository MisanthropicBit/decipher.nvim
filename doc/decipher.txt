*decipher.nvim*                                         {Encode and decode text}

==============================================================================

           █▀▀▄ █▀▀▀ █▀▀▀ █ █▀▀▄ █  █ █▀▀▀ █▀▀▄   █▄ █ █  █ █ █▄ ▄█
           █  █ ██   █    █ █▄▄█ ████ ██   █▄▄█   █▀▄█ █  █ █ █ ▀ █
           █▄▄▀ █▄▄▄ █▄▄▄ █ █    █  █ █▄▄▄ █ █  ▄ █ ▀█ ▀▄▄▀ █ █   █

                               Version 1.0.0

A plugin that provides ways to encode and decode text using various codecs
like base64.

==============================================================================
decipher                                                              *decipher*

                               `decipher.nvim`

  Setup ....................................................... |decipher.setup|
  Types ....................................................... |decipher.types|
  Functions ............................................... |decipher.functions|
  Mappings ................................................. |decipher.mappings|
  Motions ................................................... |decipher.motions|
  Highlights ............................................. |decipher.highlights|
  Codecs ..................................................... |decipher.codecs|
  FAQ ........................................................... |decipher.faq|
  License ................................................... |decipher.license|

==============================================================================
Setup                                                           *decipher-setup*

Warning: A bit library is needed which requires that either neovim has been
compiled with luajit or you are using v0.9.0+ which provides a bit library.

Setup decipher using `decipher.setup` unless you are content with the defaults.
The options below are the default values.

>lua
    require("decipher").setup({
        active_codecs = "all", -- Set all codecs as active and useable
        float = { -- Floating window options
            padding = 0, -- Zero padding (does not apply to title if any)
            border = { -- Floating window border
                { "╭", "FloatBorder" },
                { "─", "FloatBorder" },
                { "╮", "FloatBorder" },
                { "│", "FloatBorder" },
                { "╯", "FloatBorder" },
                { "─", "FloatBorder" },
                { "╰", "FloatBorder" },
                { "│", "FloatBorder" },
            },
            mappings = {
                close = "q", -- Key to press to close the floating window
                apply = "a", -- Key to press to apply the encoding/decoding
                jsonpp = "J", -- Key to prettily format contents as json if possbile
                help = "?", -- Toggle help
            },
            title = true, -- Display a title with the codec name
            title_pos = "left" -- Position of the title
            autoclose = true, -- Autoclose floating window if insert
                              -- mode is activated or the cursor is moved
            enter = false, -- Automatically enter the floating window if
                           -- opened
            options = {}, -- Options to apply to the floating window contents
        },
    })

==============================================================================
Types                                                           *decipher.types*
<
                                                               *decipher.Config*
    Fields:  
        {active_codecs} `"all" | (string | decipher.Codecs)[]`
            A list of the codecs that should be active or "all" for all
            codecs. This only affects the codecs you can choose from when
            selecting a codec via vim.ui.select.

        {float} `decipher.WindowConfig`

                                                         *decipher.WindowConfig*
    Fields:  
        {padding} `number`
            Padding around the contents in the floating window preview.

        {border} (`string | string[]`)[]
            Border around the floating window preview.

        {mappings} `table`
            Mappings for the floating window preview. Used as the left-hand
            side in a normal map defintion.

            {close} `string`
                Key to press to close the floating window.

            {apply} `string`
                Key to press to apply the encoded/decoded contents of the text
                in the floating window preview.

            {jsonpp} `string`
                Key to prettily format the contents in the floating window
                preview as json if possbile. Note that since lua table keys do
                not have any deterministic order, the prettified contents
                might have a different order of keys than the original
                contents.

            {help} `string`
                Toggle help.

        {title} `boolean`
            Whether or not to show a title in the floating window preview or
            not. This option requires at least nvim 0.9.

        {title_pos} "left" | "center" | "right"
            Same as the config argument for |nvim_open_win|. Either "left",
            "center", or "right". Not used if the title is disabled.

        {autoclose} `boolean`
            Autoclose the floating window preview if insert mode is entered or
            the cursor is moved.

        {enter} `boolean`
            Automatically enter the floating window preview when opened.

        {options} `table<string, any>`
            Buffer-local options to set for the floating window preview.

                                                              *decipher.Options*
    Fields:
        {preview} `(boolean)` If true, show a preview of the encoding/decoding
        instead of encoding/decoding in place.

                                                             *decipher.CodecArg*
    {string | decipher.Codecs}
        General type for functions that accept codecs as arguments. Either a
        string (e.g. "base64") or or a an enum (e.g. decipher.codec.base64).

==============================================================================
Functions                                                   *decipher.functions*

Any functions not listed here that may be accessed via the decipher module are
not considered public and are subject to change.

setup({config})                                                 *decipher.setup*
    Setup global configuration for decipher. See |decipher.setup|.

    Parameters:  
      • {config} (decipher.Config) Setup configuration table

version()                                                     *decipher.version*
    Returns the current version as a string.

supported_codecs()                                   *decipher.supported_codecs*
    Returns a list of currently supported codecs.

active_codecs()                                         *decipher.active_codecs*
    Returns a list of currently active codecs as per |active_codecs| in
    `decipher.Config`.

encode({codec_name}, {value})                                  *decipher.encode*
    Encode a value using a codec.

    Parameters:  
      • {codec_name} (`decipher.CodecArg`) Setup configuration table
      • {value}      (`string`) Value to encode

decode({codec_name}, {value})                                  *decipher.decode*
    Decode a value using a codec.

encode_selection({codec_name}, {options})            *decipher.encode_selection*
    Encode a visual selection using a codec.

    Parameters:  
      • {codec_name} (`decipher.CodecArg`) Codec to use for encoding
      • {options}    (`decipher.Options`) Options to use

decode_selection({codec_name}, {options})            *decipher.decode_selection*
    Decode a visual selection using a codec.

    Parameters:  
      • {codec_name} (`decipher.CodecArg`) Codec to use for decoding
      • {options}    (`decipher.Options`) Options to use

encode_motion({codec_name}, {options})                  *decipher.encode_motion*
    Encode using a motion and a codec.

    Parameters:  
      • {codec_name} (`decipher.CodecArg`) Codec to use for encoding
      • {options}    (`decipher.Options`) Options to use

decode_motion({codec_name}, {options})                  *decipher.decode_motion*
    Decode using a motion and a codec.

    Parameters:  
      • {codec_name} (`decipher.CodecArg`) Codec to use for decoding
      • {options}    (`decipher.Options`) Options to use

encode_selection_prompt({options})            *decipher.encode_selection_prompt*
    Encode a visual selection using a codec. Prompts with a list of the active
    codecs via vim.ui.select.

    Parameters:  
      • {options} (`decipher.Options`) Options to use

decode_selection_prompt({options})            *decipher.decode_selection_prompt*
    Decode a visual selection using a codec. Prompts with a list of the active
    codecs via vim.ui.select.

    Parameters:  
      • {options} (`decipher.Options`) Options to use

encode_motion_prompt({options})                  *decipher.encode_motion_prompt*
    Encode using a motion. Prompts with a list of the active codecs via
    vim.ui.select.

    Parameters:  
      • {options}    (`decipher.Options`) Options to use

decode_motion_prompt({options})                  *decipher.decode_motion_prompt*
    Decode using a motion. Prompts with a list of the active codecs via
    vim.ui.select.

    Parameters:  
      • {options}    (`decipher.Options`) Options to use

==============================================================================
Mappings                                                     *decipher.mappings*

No mappings are provided by default except for those for floating windows. See
the `float.mappings` option in *decipher.WindowConfig*. Mappings can easily be
set up via the lua api.

>lua
    local decipher = require("decipher")

    vim.keymap.set(
        "n",
        "<leader>de",
        function()
            decipher.encode_selection("crockford")
        end,
        { noremap = true, silent = true }
    )
 

==============================================================================
Motions                                                       *decipher.motions*

Decipher can encode and decode across a motion. The following lua code sets up
decipher to decode a text object using base64 using a floating window preview.
>lua
    local decipher = require("decipher")

    vim.keymap.set(
        "n",
        "<leader>d",
        function()
            decipher.decode_motion("base64", { preview = true })
        end,
        { noremap = true, silent = true }
    )

==============================================================================
Highlights                                                 *decipher.highlights*

*DecipherFloatTitle*
  Highlight group for the title of the floating window preview. Defaults to
  *Title*.

==============================================================================
Codecs                                                         *decipher.codecs*

Currently supported codecs:

* base32
* zbase32: Variant of base32 with a different alphabet.
* crockford: Variant of base32 with a different alphabet.
* base64
* base64-url: Combination of base64 and url codecs.
* base64-url-safe: Base64-variant that is safe to include in urls.
* url

==============================================================================
FAQ                                                               *decipher.faq*

Nothing yet.

==============================================================================
License                                                       *decipher.license*

BSD 3-Clause License. Copyright © 2020 MisanthropicBit

 vim:tw=78:ts=8:ft=help:norl:
